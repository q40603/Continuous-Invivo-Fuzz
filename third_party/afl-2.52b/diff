--- ../../origin/afl-2.52b/afl-fuzz.c	2020-05-19 06:09:59.597699054 +0000
+++ ./afl-fuzz.c	2020-06-08 06:38:27.198804135 +0000
@@ -32,6 +32,7 @@
 #include "alloc-inl.h"
 #include "hash.h"
 
+#include <stdlib.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <stdlib.h>
@@ -45,7 +46,11 @@
 #include <termios.h>
 #include <dlfcn.h>
 #include <sched.h>
+#include <stddef.h>
 
+#include <linux/limits.h>
+#include <sys/un.h>
+#include <sys/socket.h>
 #include <sys/wait.h>
 #include <sys/time.h>
 #include <sys/shm.h>
@@ -122,7 +127,9 @@
            run_over10m,               /* Run time over 10 minutes?        */
            persistent_mode,           /* Running in persistent mode?      */
            deferred_mode,             /* Deferred forkserver mode?        */
-           fast_cal;                  /* Try to calibrate faster?         */
+           fast_cal,                  /* Try to calibrate faster?         */
+           BSA_forkserver = 0,             /* using BSA forkserver       */
+           BSA_init = 0;              /* whether BSA initialzed */
 
 static s32 out_fd,                    /* Persistent fd for out_file       */
            dev_urandom_fd = -1,       /* Persistent fd for /dev/urandom   */
@@ -130,7 +137,9 @@
            fsrv_ctl_fd,               /* Fork server control pipe (write) */
            fsrv_st_fd;                /* Fork server status pipe (read)   */
 
-static s32 forksrv_pid,               /* PID of the fork server           */
+static s32 BSA_master_pid = 0,        /* PID of target parent             */
+           BSA_entryblock_id = 0,     /* ID of fuzz entryblock            */
+           forksrv_pid = 0,           /* PID of the fork server           */
            child_pid = -1,            /* PID of the fuzzed program        */
            out_dir_fd = -1;           /* FD of the lock file              */
 
@@ -142,7 +151,9 @@
 
 static u8  var_bytes[MAP_SIZE];       /* Bytes that appear to be variable */
 
-static s32 shm_id;                    /* ID of the SHM region             */
+static s32 shm_id = 0,                /* ID of the SHM region             */
+           BSA_threshold = 0;         /* Threshols of BSA fuzzing         */
+            
 
 static volatile u8 stop_soon,         /* Ctrl-C pressed?                  */
                    clear_screen = 1,  /* Window resized?                  */
@@ -1347,12 +1358,14 @@
 
   memset(virgin_tmout, 255, MAP_SIZE);
   memset(virgin_crash, 255, MAP_SIZE);
+  
+  if (!shm_id){
+    shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
 
-  shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
-
-  if (shm_id < 0) PFATAL("shmget() failed");
-
-  atexit(remove_shm);
+    if (shm_id < 0) PFATAL("shmget() failed");
+      
+    atexit(remove_shm);
+  }
 
   shm_str = alloc_printf("%d", shm_id);
 
@@ -2255,6 +2268,126 @@
 }
 
 
+EXP_ST int BSA_connect_sock(char* sock_name){
+    int addr_len;
+    struct sockaddr_un addr;
+    int fd;
+
+    memset(&addr, 0, sizeof(addr));
+    if ( (fd = socket(AF_LOCAL, SOCK_STREAM, 0)) == -1){
+        FATAL("Can't create bsa_handshake socket");
+    }
+    addr.sun_family = AF_LOCAL;
+    strcpy(addr.sun_path, sock_name);
+    addr_len = offsetof(struct sockaddr_un, sun_path) + strlen(addr.sun_path);
+    if(connect(fd, (struct sockaddr*)&addr, addr_len) < 0){
+       FATAL("Can't connect bsa remote %s", sock_name);
+    }
+    return fd;
+} 
+
+EXP_ST void BSA_report(){
+    struct sockaddr_un addr;
+    int addr_len;
+    int sockfd;
+    
+    sockfd = socket(AF_LOCAL, SOCK_STREAM, 0);
+    
+    memset(&addr, 0, sizeof(struct sockaddr_un)); 
+    addr.sun_family = AF_LOCAL;
+    sprintf(addr.sun_path, "/tmp/BSA_req_%d.sock", BSA_master_pid );
+    addr_len = offsetof(struct sockaddr_un, sun_path) + strlen(addr.sun_path);
+    if(connect(sockfd, (struct sockaddr*)&addr, addr_len) < 0){
+       perror("Can't connect bsa remote file server");
+    }
+    
+    int resp[4];
+    resp[0] = 2;
+    resp[1] = getpid();
+    resp[2] = BSA_entryblock_id;
+    resp[3] = queued_discovered;
+    
+    if (write(sockfd, resp, 16) != 16){
+        perror("write failed");
+        exit(1);
+    }
+    ACTF("BSA_report %d\n", queued_paths);
+    close(sockfd);
+    if (resp[3] < BSA_threshold){
+        exit(0);
+    }
+    //kill(getpid(), SIGTERM);
+
+}
+
+EXP_ST void init_BSA_forkserver() {
+
+  static struct itimerval it;
+  int status;
+  s32 rlen;
+  int bsa_handshake_fd;
+  char sock_path[256];
+  char buf[1024];
+  char resolved_path[PATH_MAX];
+
+  ACTF("Spinning up the BSA fork server...");
+  printf("forksrv_pd: %d\n", forksrv_pid);
+  
+  if (forksrv_pid) {
+      
+      /* bsa handshake to tell shm_id  */
+      ACTF("BSA handshake...");
+      sprintf(sock_path, "/tmp/BSA_handshake_%d.sock", forksrv_pid);
+      bsa_handshake_fd = BSA_connect_sock(sock_path);
+      realpath(out_dir, resolved_path);
+      sprintf(buf, "BSA %s/ %d", resolved_path, shm_id);
+      write(bsa_handshake_fd, buf, strlen(buf));
+      close(bsa_handshake_fd);
+
+      /* setup sts fd */
+      ACTF("Setup BSA %d sts channel...", forksrv_pid);
+      sprintf(sock_path, "/tmp/BSA_sts_%d.sock", forksrv_pid);
+      fsrv_st_fd = BSA_connect_sock(sock_path);
+
+      /* setup ctl fd */
+      sprintf(sock_path, "/tmp/BSA_ctl_%d.sock", forksrv_pid);
+      fsrv_ctl_fd = BSA_connect_sock(sock_path);
+      ACTF("Setup BSA ctl channel...");
+
+
+      /* Wait for the fork server to come up, but don't wait too long. */
+
+      it.it_value.tv_sec = ((exec_tmout * FORK_WAIT_MULT) / 1000);
+      it.it_value.tv_usec = ((exec_tmout * FORK_WAIT_MULT) % 1000) * 1000;
+
+      setitimer(ITIMER_REAL, &it, NULL);
+
+      rlen = read(fsrv_st_fd, &status, 4);
+
+      it.it_value.tv_sec = 0;
+      it.it_value.tv_usec = 0;
+
+      setitimer(ITIMER_REAL, &it, NULL);
+
+      /* If we have a four-byte "hello" message from the server, we're all set.
+         Otherwise, try to figure out what went wrong. */
+
+      if (rlen == 4) {
+        OKF("All right - fork server is up.");
+        BSA_init = 1;
+        return;
+      }
+    
+      ACTF("rlen: %d\n", rlen);
+      
+      if (child_timed_out)
+        FATAL("Timeout while initializing fork server (adjusting -t may help)");
+      
+  }
+
+}
+
+
 /* Execute target application, monitoring for timeouts. Return status
    information. The called program will update trace_bits[]. */
 
@@ -2280,8 +2413,9 @@
      execve(). There is a bit of code duplication between here and 
      init_forkserver(), but c'est la vie. */
 
+  
   if (dumb_mode == 1 || no_forkserver) {
-
+    ACTF("[dumb_mode] %d, [no_forkserver] %u\n", dumb_mode, (unsigned)no_forkserver);
     child_pid = fork();
 
     if (child_pid < 0) PFATAL("fork() failed");
@@ -2366,6 +2500,7 @@
 
     if ((res = write(fsrv_ctl_fd, &prev_timed_out, 4)) != 4) {
 
+      ACTF("res: %d sts channel...", res);
       if (stop_soon) return 0;
       RPFATAL(res, "Unable to request new process from fork server (OOM?)");
 
@@ -2379,7 +2514,6 @@
     }
 
     if (child_pid <= 0) FATAL("Fork server is misbehaving (OOM?)");
-
   }
 
   /* Configure timeout, as requested by user, then wait for child to terminate. */
@@ -2406,6 +2540,7 @@
 
     }
 
+
   }
 
   if (!WIFSTOPPED(status)) child_pid = 0;
@@ -2416,7 +2551,10 @@
   setitimer(ITIMER_REAL, &it, NULL);
 
   total_execs++;
-
+  
+  if (BSA_forkserver && total_execs == 100000){
+    BSA_report();  
+  }
   /* Any subsequent operations on trace_bits must not be moved by the
      compiler below this point. Past this location, trace_bits[] behave
      very normally and do not have to be treated as volatile. */
@@ -2456,6 +2594,10 @@
   if ((dumb_mode == 1 || no_forkserver) && tb4 == EXEC_FAIL_SIG)
     return FAULT_ERROR;
 
+  if ( WEXITSTATUS(status) != 0 ){
+      return FAULT_CRASH;
+  }
+
   return FAULT_NONE;
 
 }
@@ -2558,7 +2700,9 @@
   /* Make sure the forkserver is up before we do anything, and let's not
      count its spin-up time toward binary calibration. */
 
-  if (dumb_mode != 1 && !no_forkserver && !forksrv_pid)
+  if (dumb_mode != 1 && !no_forkserver && BSA_forkserver && !BSA_init)
+    init_BSA_forkserver();
+  else if (dumb_mode != 1 && !no_forkserver && !forksrv_pid)
     init_forkserver(argv);
 
   if (q->exec_cksum) memcpy(first_trace, trace_bits, MAP_SIZE);
@@ -2577,8 +2721,8 @@
 
     /* stop_soon is set by the handler for Ctrl+C. When it's pressed,
        we want to bail out quickly. */
-
-    if (stop_soon || fault != crash_mode) goto abort_calibration;
+    
+    if (stop_soon || (fault && (fault != crash_mode) )) goto abort_calibration;
 
     if (!dumb_mode && !stage_cur && !count_bytes(trace_bits)) {
       fault = FAULT_NOINST;
@@ -2586,7 +2730,7 @@
     }
 
     cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
-
+    //printf("cksum 2688: %x\n", cksum);
     if (q->exec_cksum != cksum) {
 
       u8 hnb = has_new_bits(virgin_bits);
@@ -2602,15 +2746,13 @@
 
             var_bytes[i] = 1;
             stage_max    = CAL_CYCLES_LONG;
-
           }
-
         }
-
+        
+        //SAYF("Var Detected!\n");
         var_detected = 1;
 
       } else {
-
         q->exec_cksum = cksum;
         memcpy(first_trace, trace_bits, MAP_SIZE);
 
@@ -2619,7 +2761,6 @@
     }
 
   }
-
   stop_us = get_cur_time_us();
 
   total_cal_us     += stop_us - start_us;
@@ -2721,6 +2862,7 @@
     close(fd);
 
     res = calibrate_case(argv, q, use_mem, 0, 1);
+
     ck_free(use_mem);
 
     if (stop_soon) return;
@@ -2735,7 +2877,7 @@
 
         if (q == queue) check_map_coverage();
 
-        if (crash_mode) FATAL("Test case '%s' does *NOT* crash", fn);
+        if (crash_mode & FAULT_CRASH) FATAL("Test case '%s' does *NOT* crash", fn);
 
         break;
 
@@ -2780,7 +2922,7 @@
 
       case FAULT_CRASH:  
 
-        if (crash_mode) break;
+        if (crash_mode & FAULT_CRASH) break;
 
         if (skip_crashes) {
           WARNF("Test case results in a crash (skipping)");
@@ -2876,12 +3018,14 @@
 
   }
 
+  
   if (cal_failures) {
-
+    
+      /*
     if (cal_failures == queued_paths)
       FATAL("All test cases time out%s, giving up!",
             skip_crashes ? " or crash" : "");
-
+    */
     WARNF("Skipped %u test cases (%0.02f%%) due to timeouts%s.", cal_failures,
           ((double)cal_failures) * 100 / queued_paths,
           skip_crashes ? " or crashes" : "");
@@ -2890,6 +3034,7 @@
       WARNF(cLRD "High percentage of rejected test cases, check settings!");
 
   }
+  
 
   OKF("All test cases processed.");
 
@@ -2903,7 +3048,7 @@
   s32 i = link(old_path, new_path);
   s32 sfd, dfd;
   u8* tmp;
-
+    
   if (!i) return;
 
   sfd = open(old_path, O_RDONLY);
@@ -2914,8 +3059,9 @@
 
   tmp = ck_alloc(64 * 1024);
 
-  while ((i = read(sfd, tmp, 64 * 1024)) > 0) 
+  while ((i = read(sfd, tmp, 64 * 1024)) > 0){ 
     ck_write(dfd, tmp, i, new_path);
+  }
 
   if (i < 0) PFATAL("read() failed");
 
@@ -3121,7 +3267,7 @@
   s32 fd;
   u8  keeping = 0, res;
 
-  if (fault == crash_mode) {
+  if (fault == crash_mode ) {
 
     /* Keep only if there are new bits in the map, add to queue for
        future fuzzing, etc. */
@@ -3150,7 +3296,7 @@
     }
 
     queue_top->exec_cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
-
+    //printf("cksum 3254: %x\n", queue_top->exec_cksum);
     /* Try to calibrate inline; this also calls update_bitmap_score() when
        successful. */
 
@@ -3988,12 +4134,12 @@
 
   /* Let's start by drawing a centered banner. */
 
-  banner_len = (crash_mode ? 24 : 22) + strlen(VERSION) + strlen(use_banner);
+  banner_len = (crash_mode & FAULT_CRASH ? 24 : 22) + strlen(VERSION) + strlen(use_banner);
   banner_pad = (80 - banner_len) / 2;
   memset(tmp, ' ', banner_pad);
 
   sprintf(tmp + banner_pad, "%s " cLCY VERSION cLGN
-          " (%s)",  crash_mode ? cPIN "peruvian were-rabbit" : 
+          " (%s)",  crash_mode & FAULT_CRASH ? cPIN "peruvian were-rabbit" : 
           cYEL "american fuzzy lop", use_banner);
 
   SAYF("\n%s\n\n", tmp);
@@ -4046,7 +4192,7 @@
      except when resuming fuzzing or running in non-instrumented mode. */
 
   if (!dumb_mode && (last_path_time || resuming_fuzz || queue_cycle == 1 ||
-      in_bitmap || crash_mode)) {
+      in_bitmap || (crash_mode&FAULT_CRASH))) {
 
     SAYF(bV bSTOP "   last new path : " cRST "%-34s ",
          DTD(cur_ms, last_path_time));
@@ -4147,7 +4293,7 @@
   sprintf(tmp, "%s (%s%s unique)", DI(total_crashes), DI(unique_crashes),
           (unique_crashes >= KEEP_UNIQUE_CRASH) ? "+" : "");
 
-  if (crash_mode) {
+  if (crash_mode & FAULT_CRASH) {
 
     SAYF(bV bSTOP " total execs : " cRST "%-21s " bSTG bV bSTOP
          "   new crashes : %s%-22s " bSTG bV "\n", DI(total_execs),
@@ -4512,6 +4658,7 @@
       /* Note that we don't keep track of crashes or hangs here; maybe TODO? */
 
       cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
+      //printf("cksum 4616: %x\n", cksum);
 
       /* If the deletion had no impact on the trace, make it permanent. This
          isn't perfect for variable-path inputs, but we're just making a
@@ -4641,7 +4788,7 @@
   u32 min_value, max_value;
   u32 rlim = MIN(queue_cycle, 3);
 
-  if (!run_over10m) rlim = 1;
+  if (!run_over10m) rlim = 3;
 
   switch (UR(rlim)) {
 
@@ -5020,7 +5167,7 @@
   /*******************************************
    * CALIBRATION (only if failed earlier on) *
    *******************************************/
-
+    
   if (queue_cur->cal_failed) {
 
     u8 res = FAULT_TMOUT;
@@ -5034,7 +5181,7 @@
 
     }
 
-    if (stop_soon || res != crash_mode) {
+    if (stop_soon || res != crash_mode ) {
       cur_skipped_paths++;
       goto abandon_entry;
     }
@@ -5046,7 +5193,7 @@
    ************/
 
   if (!dumb_mode && !queue_cur->trim_done) {
-
+    
     u8 res = trim_case(argv, queue_cur, in_buf);
 
     if (res == FAULT_ERROR)
@@ -5150,6 +5297,7 @@
     if (!dumb_mode && (stage_cur & 7) == 7) {
 
       u32 cksum = hash32(trace_bits, MAP_SIZE, HASH_CONST);
+      //printf("cksum 5255: %x\n", cksum);
 
       if (stage_cur == stage_max - 1 && cksum == prev_cksum) {
 
@@ -5163,7 +5311,6 @@
           maybe_add_auto(a_collect, a_len);
 
       } else if (cksum != prev_cksum) {
-
         /* Otherwise, if the checksum has changed, see if we have something
            worthwhile queued up, and collect that if the answer is yes. */
 
@@ -7096,7 +7243,6 @@
     maybe_delete_out_dir();
 
   } else {
-
     if (in_place_resume)
       FATAL("Resume attempted but old output directory not found");
 
@@ -7208,7 +7354,8 @@
 
   unlink(fn); /* Ignore errors */
 
-  out_fd = open(fn, O_RDWR | O_CREAT | O_EXCL, 0600);
+  /* permission released */
+  out_fd = open(fn, O_RDWR | O_CREAT | O_EXCL, 0644);
 
   if (out_fd < 0) PFATAL("Unable to create '%s'", fn);
 
@@ -7723,7 +7870,7 @@
   gettimeofday(&tv, &tz);
   srandom(tv.tv_sec ^ tv.tv_usec ^ getpid());
 
-  while ((opt = getopt(argc, argv, "+i:o:f:m:t:T:dnCB:S:M:x:Q")) > 0)
+  while ((opt = getopt(argc, argv, "+i:o:f:m:t:T:dnCB:S:M:x:Qp:b:P:s:R:")) > 0)
 
     switch (opt) {
 
@@ -7868,7 +8015,7 @@
         if (crash_mode) FATAL("Multiple -C options not supported");
         crash_mode = FAULT_CRASH;
         break;
-
+        
       case 'n': /* dumb mode */
 
         if (dumb_mode) FATAL("Multiple -n options not supported");
@@ -7890,6 +8037,32 @@
         if (!mem_limit_given) mem_limit = MEM_LIMIT_QEMU;
 
         break;
+      
+      case 'p': /* BSA_forkserver pid */
+        sscanf(optarg, "%u", &forksrv_pid);
+        BSA_forkserver = 1;
+        SAYF(cCYA "[BSA_forksrv_id] %d\n", forksrv_pid);
+        break;
+      
+      case 'R':
+        sscanf(optarg, "%d", &BSA_threshold);
+        SAYF(cCYA "[BSA threashold] %d\n", BSA_threshold);
+        break;
+
+      case 's': /* BSA shm id */
+        sscanf(optarg, "%d", &shm_id);
+        SAYF(cCYA "[BSA_shm_id] %d\n", shm_id);
+        break;
+      
+      case 'P': /* BSA_master ID*/
+        sscanf(optarg, "%d", &BSA_master_pid);
+        SAYF(cCYA "[BSA_master_pid] %d\n", BSA_master_pid);
+        break;
+
+      case 'b':
+        sscanf(optarg, "%d", &BSA_entryblock_id);
+        SAYF(cCYA "[BSA_entryblock_id] %d\n", BSA_entryblock_id);
+        break; 
 
       default:
 
@@ -7969,7 +8142,8 @@
 
   if (!out_file) setup_stdio_file();
 
-  check_binary(argv[optind]);
+  if (!forksrv_pid)
+    check_binary(argv[optind]);
 
   start_time = get_cur_time();
 
